# Generated by Django 2.2.6 on 2019-10-30 03:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_restricted', models.BooleanField(default=False)),
                ('is_temporary', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('title', models.CharField(max_length=64)),
                ('content', models.TextField(blank=True, default='')),
                ('order', models.PositiveSmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('slug', models.SlugField()),
                ('title', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True, max_length=256)),
                ('order', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('slug', models.SlugField()),
                ('title', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True, max_length=256)),
                ('readme', models.TextField(blank=True)),
                ('locale', models.CharField(max_length=8)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('is_listed', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('title', models.CharField(max_length=64)),
                ('code', models.TextField(blank=True, default='')),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Chapter')),
            ],
        ),
        migrations.CreateModel(
            name='QuizUserRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('is_passed', models.BooleanField(default=False)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CourseUserRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('accessed_at', models.DateTimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Course'),
        ),
        migrations.CreateModel(
            name='ArticleUserRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('is_read', models.BooleanField(default=False)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Article')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='chapter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Chapter'),
        ),
        migrations.AddIndex(
            model_name='quizuserrelation',
            index=models.Index(fields=['quiz'], name='core_quizus_quiz_id_b25488_idx'),
        ),
        migrations.AddIndex(
            model_name='quizuserrelation',
            index=models.Index(fields=['user'], name='core_quizus_user_id_cd3848_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='quizuserrelation',
            unique_together={('quiz', 'user')},
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['chapter'], name='core_quiz_chapter_175533_idx'),
        ),
        migrations.AddIndex(
            model_name='courseuserrelation',
            index=models.Index(fields=['course'], name='core_course_course__f846d0_idx'),
        ),
        migrations.AddIndex(
            model_name='courseuserrelation',
            index=models.Index(fields=['user'], name='core_course_user_id_f9d828_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseuserrelation',
            unique_together={('course', 'user')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['slug'], name='core_course_slug_ed28d0_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['user'], name='core_course_user_id_ea3e41_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('slug', 'user')},
        ),
        migrations.AddIndex(
            model_name='articleuserrelation',
            index=models.Index(fields=['article'], name='core_articl_article_a676dc_idx'),
        ),
        migrations.AddIndex(
            model_name='articleuserrelation',
            index=models.Index(fields=['user'], name='core_articl_user_id_61010c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='articleuserrelation',
            unique_together={('article', 'user')},
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['chapter'], name='core_articl_chapter_13c298_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='core_user_usernam_e8adca_idx'),
        ),
    ]
